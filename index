import React, { useState } from 'react';
import { ArrowLeft, ArrowRight } from 'lucide-react';

// Sample data structure - replace with your actual questions and options
const questions = [
  {
    id: 1,
    text: "What is the nature of the infringement?",
    subtext: "Consider how the intellectual property is being used without authorization",
    options: [
      {
        text: "Direct commercial use",
        explanation: "The infringer is directly profiting from your IP",
        scores: [
          { optionId: 1, score: 1 },
          { optionId: 2, score: 1 },
          { optionId: 3, score: -1 }
        ],
        markNotApplicable: [4, 5],
        skipQuestions: [3]
      },
      {
        text: "Indirect or non-commercial use",
        explanation: "The infringement is not directly generating profit",
        scores: [
          { optionId: 1, score: -1 },
          { optionId: 2, score: 1 },
          { optionId: 3, score: 1 }
        ]
      }
    ]
  },
  // Add more questions following the same structure
];

const enforcementOptions = [
  { id: 1, text: "Send Cease and Desist Letter", score: 0, notApplicable: false },
  { id: 2, text: "File for Preliminary Injunction", score: 0, notApplicable: false },
  { id: 3, text: "Initiate Settlement Discussion", score: 0, notApplicable: false },
  { id: 4, text: "File Civil Lawsuit", score: 0, notApplicable: false },
  { id: 5, text: "Submit DMCA Takedown Notice", score: 0, notApplicable: false },
  // Add more enforcement options
];

const App = () => {
  const [started, setStarted] = useState(false);
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [answers, setAnswers] = useState({});
  const [options, setOptions] = useState(enforcementOptions);
  const [showResults, setShowResults] = useState(false);
  const [showNotApplicable, setShowNotApplicable] = useState(false);
  const [showAllOptions, setShowAllOptions] = useState(false);

  const handleStart = () => setStarted(true);

  const handleAnswer = (questionId, selectedOption) => {
    setAnswers(prev => ({ ...prev, [questionId]: selectedOption }));
    
    // Update scores
    const newOptions = [...options];
    selectedOption.scores.forEach(({ optionId, score }) => {
      const option = newOptions.find(opt => opt.id === optionId);
      if (option) option.score += score;
    });
    
    // Mark options as not applicable
    if (selectedOption.markNotApplicable) {
      selectedOption.markNotApplicable.forEach(optionId => {
        const option = newOptions.find(opt => opt.id === optionId);
        if (option) option.notApplicable = true;
      });
    }
    
    setOptions(newOptions);
  };

  const navigateQuestion = (direction) => {
    const nextQuestion = currentQuestion + direction;
    if (nextQuestion >= 0 && nextQuestion < questions.length) {
      setCurrentQuestion(nextQuestion);
    } else if (nextQuestion === questions.length) {
      setShowResults(true);
    }
  };

  const getGroupedOptions = () => {
    const validOptions = options
      .filter(opt => !opt.notApplicable)
      .sort((a, b) => b.score - a.score);

    return {
      primary: validOptions.slice(0, 3),
      secondary: validOptions.slice(3, 6),
      tertiary: validOptions.slice(6, 9),
      remaining: validOptions.slice(9)
    };
  };

  if (!started) {
    return (
      <div className="min-h-screen bg-[#1D252C] flex items-center justify-center p-4">
        <div className="text-center">
          <h1 className="text-4xl font-bold text-[#E5E8EC] mb-6 font-['Montserrat']">
            IP Enforcement Options Advisor
          </h1>
          <button
            onClick={handleStart}
            className="bg-[#30AEB6] hover:bg-[#30AEB6]/80 text-white font-bold py-3 px-6 rounded-lg transition-colors"
          >
            Begin Assessment
          </button>
        </div>
      </div>
    );
  }

  if (showResults) {
    const groups = getGroupedOptions();
    
    return (
      <div className="min-h-screen bg-[#1D252C] p-8">
        <div className="max-w-4xl mx-auto">
          <h2 className="text-2xl font-bold text-[#E5E8EC] mb-8">Recommended Enforcement Options</h2>
          
          <div className="space-y-8">
            <div>
              <h3 className="text-xl text-[#30AEB6] mb-4">Primary Options to Consider</h3>
              <div className="grid grid-cols-3 gap-4">
                {groups.primary.map(option => (
                  <div key={option.id} className="bg-[#313d48] p-4 rounded-lg">
                    <p className="text-[#E5E8EC]">{option.text}</p>
                    <span className="text-[#1D252C]">{option.score}</span>
                  </div>
                ))}
              </div>
            </div>

            <div>
              <h3 className="text-xl text-[#60106a] mb-4">Secondary Options</h3>
              <div className="grid grid-cols-3 gap-4">
                {groups.secondary.map(option => (
                  <div key={option.id} className="bg-[#313d48] p-4 rounded-lg">
                    <p className="text-[#E5E8EC]">{option.text}</p>
                    <span className="text-[#1D252C]">{option.score}</span>
                  </div>
                ))}
              </div>
            </div>

            <div className="flex gap-4 mt-8">
              <button
                onClick={() => setShowNotApplicable(!showNotApplicable)}
                className="bg-[#313d48] text-[#E5E8EC] px-4 py-2 rounded"
              >
                {showNotApplicable ? 'Hide' : 'Show'} Not Applicable Options
              </button>
              
              <button
                onClick={() => setShowAllOptions(!showAllOptions)}
                className="bg-[#313d48] text-[#E5E8EC] px-4 py-2 rounded"
              >
                See {options.filter(opt => !opt.notApplicable).length - 9} Other Options
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  }

  const question = questions[currentQuestion];
  const progress = ((currentQuestion + 1) / questions.length) * 100;

  return (
    <div className="min-h-screen bg-[#1D252C] p-8">
      <div className="max-w-2xl mx-auto">
        <div className="h-2 bg-[#313d48] rounded-full mb-8">
          <div
            className="h-full bg-[#30AEB6] rounded-full transition-all duration-300"
            style={{ width: `${progress}%` }}
          />
        </div>

        <div className="bg-[#313d48] rounded-lg p-6 mb-8">
          <h2 className="text-2xl font-bold text-[#E5E8EC] mb-2">{question.text}</h2>
          <p className="text-[#E5E8EC]/80 mb-6">{question.subtext}</p>

          <div className="space-y-4">
            {question.options.map((option, idx) => (
              <div key={idx} className="space-y-2">
                <button
                  onClick={() => handleAnswer(question.id, option)}
                  className={`w-full text-left p-4 rounded ${
                    answers[question.id] === option
                      ? 'bg-[#30AEB6] text-white'
                      : 'bg-[#E5E8EC] text-[#1D252C] hover:bg-[#E5E8EC]/80'
                  }`}
                >
                  {option.text}
                </button>
                {answers[question.id] === option && (
                  <p className="text-[#84C98F] pl-4">{option.explanation}</p>
                )}
              </div>
            ))}
          </div>
        </div>

        <div className="flex justify-between">
          <button
            onClick={() => navigateQuestion(-1)}
            disabled={currentQuestion === 0}
            className="flex items-center gap-2 px-4 py-2 bg-[#313d48] text-[#E5E8EC] rounded disabled:opacity-50"
          >
            <ArrowLeft size={20} /> Previous
          </button>
          
          <button
            onClick={() => navigateQuestion(1)}
            className="flex items-center gap-2 px-4 py-2 bg-[#30AEB6] text-white rounded"
          >
            {currentQuestion === questions.length - 1 ? 'See Results' : 'Next'} <ArrowRight size={20} />
          </button>
        </div>
      </div>
    </div>
  );
};

export default App;
